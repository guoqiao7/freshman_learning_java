package com.cskaoyan._02method._02define;

/**
 * @description:
 * @author: 景天
 * @date: 2023/12/30 9:16
 **/
/*
public static void main(String[] args) {

}

[修饰符列表] 返回值类型 方法名 (形式参数列表){
	// 方法体 do sth
}
1. 方法的声明(方法头): [修饰符列表] 返回值类型 方法名 (形式参数列表)
2. 方法的签名(method signature): 方法名 (形式参数列表)

1. 修饰符列表：修饰符列表不是必须的，可以为空不写，现在默认为public static（具体含义面向对象讲）
2. 返回值类型：方法可能会有结果，这个结果就是返回值，返回值的数据类型称之为返回值类型
   1. 返回值类型可以是基本数据类型，也可以是引用数据类型（例如String）
      - 此时表示方法拥有返回值，必须显式的指出该返回值，否则编译报错
      - 在方法体中用return关键字指示返回值，格式为return + 返回值
      - return后的返回值的数据类型，要和方法声明中的返回值类型保持一致（或者兼容）
      - 方法执行到return语句时，表示方法执行完毕。
   2. 方法完全可以没有结果，也就是没有返回值，但是方法必须要有返回值类型，用关键字void标记。使用void标记的方法，没有返回值，自然也无需指出返回值
3. 方法名：给方法起个名字，调用方法时用的，方法名的命名需要遵守规范
   - 必须是合法的标识符
   - 方法名最好见名知意
   - 小驼峰命名法
4. 形式参数列表：方法在实现功能时，有时需要传入数据。
方法在定义时就应该告诉方法的调用者应该传入什么数据，这就是形式参数列表，简称形参列表
   - 形参可以是基本数据类型变量，也可以是引用数据类型变量
   - 形参的个数不受限，多个形参之间用逗号隔开
   - 形参的作用域仅在方法内部，它们都是局部变量
   - 形参中起关键决定性作用的是形参的数据类型，形参名只是一个标识符，不会影响方法调用
   - 调用方法时传入的具体数据参数称之为实际参数，简称实参
   - 方法调用时，实参和形参的数据类型要一一对应，并且保持一致（或者兼容）
5. 方法体：方法体包含具体的语句，定义该方法的功能，由大括号包裹起来。


引例，现在有三个需求：
1. 编写程序，计算10+20，并输出结果
2. 编写程序，计算111+222，并输出结果
3. 编写程序，计算333+444，并输出结果
 */
public class Demo {
    public static void main(String[] args) {
        // 方法调用
        // 本类中 可以直接通过方法名进行调用静态方法
        int sum1 = getSum(10,20);
        System.out.println(sum1);
        int sum2 = getSum(111, 222);
        int sum3 = getSum(333, 444);
        System.out.println(getSum(1,2));

    }

    public static int getSum(int a, int b) {
        int sum = a+b;
        return sum;
        //return a + b;
    }
}
